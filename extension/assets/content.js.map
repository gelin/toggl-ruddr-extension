{"version":3,"file":"content.js","sources":["../../src/content/TogglButton.svelte","../../src/content/content.ts"],"sourcesContent":["<script lang=\"ts\">\n    let {panelVisible} = $props();\n\n    function onClick() {\n        console.log('Toggl button clicked');\n        // TODO, show report\n    }\n</script>\n\n<button id=\"toggl_button\" onclick={onClick}>Toggl</button>\n\n<style>\n    button {\n        display: block;\n        margin-top: 1.5rem;\n        cursor: pointer;\n    }\n</style>\n","/**\n * Content script for Ruddr integration\n */\nimport TogglButton from './TogglButton.svelte';\n// import ReportPanel from './ReportPanel.svelte';\nimport {togglFetchReport, togglSaveProjectMapping, type TogglReportItem} from '../lib/toggl';\nimport {mount} from \"svelte\";\n\n// Global state\nlet togglLastProjectIdClicked: string | null = null;\nlet togglLastReportDate: string = '_';\nconst togglClickedReportItems: Set<string> = new Set();\n\nexport function togglInit(): void {\n    const observer = new MutationObserver(mutations => {\n        togglAddButton();\n    });\n    observer.observe(document.body, { childList: true });\n    // TODO: Is it possible to observe not the entire body?\n}\n\n/**\n * Find an element with specific text content\n */\nfunction togglFindElementWithText(startElement: Element, selector: string, text: string): Element | null {\n    const elements = startElement.querySelectorAll(selector);\n    for (const element of elements) {\n        if (element.textContent === text) {\n            return element;\n        }\n    }\n    return null;\n}\n\n/**\n * Add the Toggl button to the Ruddr form\n */\nexport function togglAddButton(): void {\n    // Don't add if already exists\n    if (document.getElementById('toggl_button')) {\n        return;\n    }\n\n    // Find the dialog\n    const dialogDiv = document.querySelector('body > div:last-of-type');\n    if (!dialogDiv) {\n        return;\n    }\n\n    // Check if it's the New Entry dialog\n    const header = togglFindElementWithText(dialogDiv as Element, 'header h5', 'New Entry');\n    if (!header) {\n        return; // not the New Entry dialogue\n    }\n\n    // Find the form\n    const form = dialogDiv.querySelector('form');\n    if (!form) {\n        // Wait for the form to be loaded\n        const dialogObserver = new MutationObserver(() => {\n            dialogObserver.disconnect();\n            togglAddButton();\n        });\n        dialogObserver.observe(dialogDiv, {childList: true, subtree: true});\n        return;\n    }\n\n    // Find the entry details header\n    const entryDetailsHeader = form.querySelector('div:nth-child(2) > div > div');\n    if (!entryDetailsHeader) {\n        return;\n    }\n\n    // Create a container for the button\n    const buttonContainer = document.createElement('p');\n    entryDetailsHeader.appendChild(buttonContainer);\n\n    // Create and mount the Toggl button component\n    mount(TogglButton, {\n        target: buttonContainer,\n        props: {\n            panelVisible: false\n        }\n    });\n}\n\n/**\n * Handle Toggl button click\n */\nasync function onTogglButtonClick(): Promise<void> {\n    if (document.getElementById('toggl_report')) {\n        togglRemoveReportPanel();\n    } else {\n        const date = togglGetReportDate();\n        togglLastReportDate = date;\n        console.log(`Fetching Toggl report for date: ${date}`);\n\n        try {\n            const report = await togglFetchReport(date);\n            console.log('Got report', report);\n            togglShowReportPanel(report);\n        } catch (err) {\n            console.warn(err);\n        }\n    }\n}\n\n/**\n * Get the date from the form\n */\nfunction togglGetReportDate(): string {\n    const form = togglfindForm();\n    const dateInput = form?.querySelector('input[name=\"date\"]');\n    // @ts-ignore - moment is loaded globally\n    return moment(dateInput?.value, 'DD/MM/YYYY').format('YYYY-MM-DD');\n}\n\n/**\n * Find the form element\n */\nfunction togglfindForm(): HTMLFormElement | null {\n    const dialogDiv = document.querySelector('body > div:last-of-type');\n    if (!dialogDiv) {\n        return null;\n    }\n    return dialogDiv.querySelector('form');\n}\n\n/**\n * Show the report panel\n */\nfunction togglShowReportPanel(report: TogglReportItem[]): void {\n    togglLastProjectIdClicked = null;\n\n    // Don't add if already exists\n    if (document.getElementById('toggl_report')) {\n        return;\n    }\n\n    const button = document.getElementById('toggl_button');\n    if (!button) {\n        return;\n    }\n\n    // Create a container for the report panel\n    const panelContainer = document.createElement('div');\n    button.insertAdjacentElement('afterend', panelContainer);\n\n    // // Create and mount the report panel component\n    // reportComponent = new ReportPanel({\n    //     target: panelContainer,\n    //     props: {\n    //         report,\n    //         date: togglLastReportDate,\n    //         clickedItems: togglClickedReportItems\n    //     }\n    // });\n    //\n    // // Add event listeners\n    // reportComponent.$on('itemClick', (event) => {\n    //     togglFillFormFromReport(event.detail.item);\n    // });\n    //\n    // reportComponent.$on('close', togglRemoveReportPanel);\n\n    // Add global click listener to close panel when clicking outside\n    document.addEventListener('click', togglOnDocumentClick);\n}\n\n/**\n * Handle document click to close the report panel\n */\nfunction togglOnDocumentClick(event: MouseEvent): void {\n    const panel = document.getElementById('toggl_report');\n    if (panel && !panel.contains(event.target as Node) && event.target !== document.getElementById('toggl_button')) {\n        togglRemoveReportPanel();\n    }\n}\n\n/**\n * Remove the report panel\n */\nfunction togglRemoveReportPanel(): void {\n    document.removeEventListener('click', togglOnDocumentClick);\n\n    const panel = document.getElementById('toggl_report');\n    if (panel) {\n        // if (reportComponent) {\n        //     reportComponent.$destroy();\n        //     reportComponent = null;\n        // }\n        panel.remove();\n    }\n}\n\n/**\n * Fill the form with data from a report item\n */\nfunction togglFillFormFromReport(item: TogglReportItem): void {\n    togglLastProjectIdClicked = item?.project?.id || null;\n    const itemId = `${togglLastReportDate}_${item?.project?.id}`;\n    togglClickedReportItems.add(itemId);\n\n    const form = togglfindForm();\n\n    // Set duration\n    const duration = form?.querySelector('input[name=\"minutes\"]');\n    if (duration) {\n        // @ts-ignore - moment is loaded globally\n        const formattedDuration = togglFormatDuration(moment.duration(item.seconds, 'seconds'));\n        togglSetInputValue(duration as HTMLInputElement, formattedDuration);\n    }\n\n    // Set description\n    const description = form?.querySelector('textarea[name=\"notes\"]');\n    if (description) {\n        (description as HTMLTextAreaElement).style.height = `${(description as HTMLTextAreaElement).scrollHeight}px`;\n        togglSetInputValue(description as HTMLTextAreaElement, item.description);\n    }\n\n    // Save project mapping\n    if (togglLastProjectIdClicked) {\n        const mapping = togglGetCustomerProjectActivity();\n        togglSaveProjectMapping(togglLastProjectIdClicked, mapping);\n    }\n\n    togglRemoveReportPanel();\n}\n\n/**\n * Format duration in hours:minutes format\n */\nfunction togglFormatDuration(duration: any): string {\n    return `${duration.hours()}:${String(duration.minutes()).padStart(2, '0')}`;\n}\n\n/**\n * Set value of an input element and dispatch input event\n */\nfunction togglSetInputValue(target: HTMLInputElement | HTMLTextAreaElement, value: string): void {\n    target.value = value;\n    // Dispatch input event to trigger React state updates\n    const event = new Event('input', {bubbles: true});\n    Object.defineProperty(event, 'target', {writable: false, value: target});\n    target.dispatchEvent(event);\n}\n\n/**\n * Get customer, project, and activity from the form\n */\nfunction togglGetCustomerProjectActivity(): { customer?: string, project?: string, activity?: string } {\n    const customer = togglReadSelect('timesheet_edit_form_customer');\n    const project = togglReadSelect('timesheet_edit_form_project');\n    const activity = togglReadSelect('timesheet_edit_form_activity');\n    return {\n        customer: customer?.id,\n        project: project?.id,\n        activity: activity?.id\n    };\n}\n\n/**\n * Read value from a select element\n */\nfunction togglReadSelect(selectId: string): { id?: string } {\n    const select = document.getElementById(selectId) as HTMLSelectElement;\n    if (!select) {\n        return {};\n    }\n    return {\n        id: select.value\n    };\n}\n"],"names":[],"mappings":";AAGa,SAAA,UAAU;AACf,UAAQ,IAAI,sBAAsB;AAEtC;;;;;;wCANJ;;;;;IASmC;AAAA;;AAFpC;;ACMQ,SAAS,YAAkB;AAC9B,QAAM,WAAW,IAAI,iBAAiB,CAAA,cAAa;AAC/C,mBAAA;AAAA,EAAe,CAClB;AACD,WAAS,QAAQ,SAAS,MAAM,EAAE,WAAW,MAAM;AAEvD;AAKA,SAAS,yBAAyB,cAAuB,UAAkB,MAA8B;AACrG,QAAM,WAAW,aAAa,iBAAiB,QAAQ;AACvD,aAAW,WAAW,UAAU;AAC5B,QAAI,QAAQ,gBAAgB,MAAM;AAC9B,aAAO;AAAA,IAAA;AAAA,EACX;AAEJ,SAAO;AACX;AAKO,SAAS,iBAAuB;AAEnC,MAAI,SAAS,eAAe,cAAc,GAAG;AACzC;AAAA,EAAA;AAIJ,QAAM,YAAY,SAAS,cAAc,yBAAyB;AAClE,MAAI,CAAC,WAAW;AACZ;AAAA,EAAA;AAIJ,QAAM,SAAS,yBAAyB,WAAsB,aAAa,WAAW;AACtF,MAAI,CAAC,QAAQ;AACT;AAAA,EAAA;AAIJ,QAAM,OAAO,UAAU,cAAc,MAAM;AAC3C,MAAI,CAAC,MAAM;AAEP,UAAM,iBAAiB,IAAI,iBAAiB,MAAM;AAC9C,qBAAe,WAAA;AACf,qBAAA;AAAA,IAAe,CAClB;AACD,mBAAe,QAAQ,WAAW,EAAC,WAAW,MAAM,SAAS,MAAK;AAClE;AAAA,EAAA;AAIJ,QAAM,qBAAqB,KAAK,cAAc,8BAA8B;AAC5E,MAAI,CAAC,oBAAoB;AACrB;AAAA,EAAA;AAIJ,QAAM,kBAAkB,SAAS,cAAc,GAAG;AAClD,qBAAmB,YAAY,eAAe;AAG9C,QAAM,aAAa;AAAA,IACf,QAAQ;AAAA,IACR,OAAO;AAAA,MACH,cAAc;AAAA,IAAA;AAAA,EAClB,CACH;AACL;"}