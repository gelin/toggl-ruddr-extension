{"version":3,"file":"toggl.js","sources":["../../src/lib/toggl.ts"],"sourcesContent":["/**\n * Toggl API integration module\n */\n\n/**\n * Get the Toggl API token from storage\n */\nexport async function togglGetApiToken(): Promise<string | null> {\n    return chrome.storage.sync.get('toggl_api_token')\n        .then(o => o?.toggl_api_token)\n        .catch(_ => null);\n}\n\n/**\n * Get the Toggl workspace ID from storage\n */\nexport async function togglGetWorkspaceId(): Promise<string | null> {\n    return chrome.storage.sync.get('toggl_workspace_id')\n        .then(o => o?.toggl_workspace_id)\n        .catch(_ => null);\n}\n\nexport type TogglSettings = {\n    token: string;\n    workspace: string;\n}\n\n/**\n * Save Toggl settings to storage\n */\nexport async function togglSaveSettings(settings: TogglSettings): Promise<void> {\n    return chrome.storage.sync.set({\n        'toggl_api_token': settings.token,\n        'toggl_workspace_id': settings.workspace\n    })\n        .then(_ => togglRefreshClients(settings.token))\n        .then(_ => togglRefreshProjects(settings.token));\n}\n\n/**\n * Test if the Toggl API token is valid\n */\nexport async function togglTestToken(token: string): Promise<string> {\n    return fetch('https://api.track.toggl.com/api/v9/me/logged', {\n        method: 'GET',\n        headers: {\n            'Authorization': `Basic ${btoa(token + ':api_token')}`\n        }\n    })\n        .then((resp) => {\n            if (resp.ok) {\n                return 'SUCCESS';\n            } else {\n                throw new Error('FAILED: not OK response');\n            }\n        })\n        .catch(err => {\n            console.log('Failed to fetch me/logged', err);\n            throw new Error('FAILED: ' + err.message);\n        });\n}\n\nexport type TogglWorkspace = {\n    id: string;\n    name: string;\n    selected?: boolean;\n}\n\n/**\n * Get workspaces from storage\n */\nexport async function togglGetWorkspaces(): Promise<TogglWorkspace[]> {\n    const workspaceId = await togglGetWorkspaceId();\n    const workspaces = await chrome.storage.local.get('toggl_workspaces')\n        .then(o => o?.toggl_workspaces || []).catch(_ => []);\n    return workspaces.map((workspace: TogglWorkspace) => {\n        workspace.selected = workspace.id === workspaceId;\n        return workspace;\n    });\n}\n\n/**\n * Set workspaces in storage\n */\nasync function togglSetWorkspaces(workspaces: TogglWorkspace[]): Promise<void> {\n    return chrome.storage.local.set({\n        'toggl_workspaces': workspaces\n    });\n}\n\n/**\n * Refresh workspaces from Toggl API\n */\nexport async function togglRefreshWorkspaces(token: string | null): Promise<TogglWorkspace[]> {\n    const apiToken = token ?? await togglGetApiToken();\n    return fetch(\"https://api.track.toggl.com/api/v9/me/workspaces\", {\n        method: \"GET\",\n        headers: {\n            'Authorization': `Basic ${btoa(apiToken + ':api_token')}`\n        },\n    })\n        .then((resp) => resp.json())\n        .then((json) => {\n            const workspaces = json.map((value: any) => {\n                return {\n                    'id': value.id,\n                    'name': value.name\n                };\n            });\n            togglSetWorkspaces(workspaces);\n            return workspaces;\n        })\n        .catch(err => {\n            console.log('Failed to fetch me/workspaces', err);\n            throw err;\n        });\n}\n\nexport type TogglClient = {\n    id: string;\n    name: string;\n}\n\n/**\n * Get clients map from storage\n */\nasync function togglGetClientsMap(): Promise<Map<string, TogglClient>> {\n    const clients = await chrome.storage.local.get('toggl_clients')\n        .then(o => o?.toggl_clients || []).catch(_ => []);\n    const idToClientMap = clients.reduce((map: Map<string, TogglClient>, client: TogglClient) => {\n        map.set(client.id, {\n            id: client.id,\n            name: client.name\n        });\n        return map;\n    }, new Map());\n    return idToClientMap;\n}\n\n/**\n * Set clients in storage\n */\nfunction togglSetClients(clients: TogglClient[]): Promise<void> {\n    return chrome.storage.local.set({\n        'toggl_clients': clients\n    });\n}\n\n/**\n * Refresh clients from Toggl API\n */\nasync function togglRefreshClients(token: string | null): Promise<void> {\n    const apiToken = token ?? await togglGetApiToken();\n    return fetch(\"https://api.track.toggl.com/api/v9/me/clients\", {\n        method: \"GET\",\n        headers: {\n            'Authorization': `Basic ${btoa(apiToken + ':api_token')}`\n        },\n    })\n        .then((resp) => resp.json())\n        .then((json) => {\n            const clients = json.map((value: any) => {\n                return {\n                    id: value.id,\n                    name: value.name\n                };\n            });\n            return togglSetClients(clients);\n        })\n        .catch(err => {\n            console.log('Failed to fetch me/clients', err);\n            throw err;\n        });\n}\n\nexport type TogglProject = {\n    id: string;\n    name: string;\n    client?: TogglClient;\n    client_id?: string;\n}\n\n/**\n * Get projects map from storage\n */\nasync function togglGetProjectsMap(): Promise<Map<string, TogglProject>> {\n    const projects = await chrome.storage.local.get('toggl_projects')\n        .then(o => o?.toggl_projects || []).catch(_ => []);\n    const clientsMap = await togglGetClientsMap();\n    const idToProjectMap = projects.reduce((map: Map<string, TogglProject>, project: TogglProject) => {\n        map.set(project.id, {\n            id: project.id,\n            name: project.name,\n            client: clientsMap.get(project.client_id!)\n        });\n        return map;\n    }, new Map());\n    return idToProjectMap;\n}\n\n/**\n * Set projects in storage\n */\nasync function togglSetProjects(projects: TogglProject[]): Promise<void> {\n    return chrome.storage.local.set({\n        'toggl_projects': projects\n    });\n}\n\n/**\n * Refresh projects from Toggl API\n */\nasync function togglRefreshProjects(token: string | null): Promise<void> {\n    const apiToken = token ?? await togglGetApiToken();\n    return fetch(\"https://api.track.toggl.com/api/v9/me/projects\", {\n        method: \"GET\",\n        headers: {\n            'Authorization': `Basic ${btoa(apiToken + ':api_token')}`\n        },\n    })\n        .then((resp) => resp.json())\n        .then((json) => {\n            const projects = json.map((value: any) => {\n                return {\n                    id: value.id,\n                    name: value.name,\n                    client_id: value.client_id\n                };\n            });\n            return togglSetProjects(projects);\n        })\n        .catch(err => {\n            console.log('Failed to fetch me/projects', err);\n            throw err;\n        });\n}\n\nexport type TogglProjectMapping = {\n    customer?: string;\n    project?: string;\n    activity?: string;\n}\n\n/**\n * Save project mapping to storage\n */\nexport async function togglSaveProjectMapping(key: string, mapping: TogglProjectMapping): Promise<void> {\n    console.log('Saving project mapping', key, mapping);\n    return chrome.storage.sync.get('toggl_project_mappings')\n        .then(o => {\n            let m = o?.toggl_project_mappings || {};\n            m[key] = mapping;\n            return chrome.storage.sync.set({\n                'toggl_project_mappings': m\n            });\n        });\n}\n\n/**\n * Get project mappings from storage\n */\nasync function togglGetProjectMappings(): Promise<Record<string, TogglProjectMapping>> {\n    return chrome.storage.sync.get('toggl_project_mappings')\n        .then(o => o?.toggl_project_mappings || {})\n        .catch(_ => ({}));\n}\n\nexport type TogglReportRequest = {\n    method: string;\n    date: string;\n}\n\nexport type TogglReportResponse = {\n    success: boolean;\n    report?: TogglReportItem[];\n    error?: any;\n}\n\n/**\n * Fetch report from background script\n */\nexport async function togglFetchReport(date: string): Promise<TogglReportItem[]> {\n    const message: TogglReportRequest = {\n        method: 'togglFetchReport',\n        date: date\n    };\n    return new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage(message, (response: TogglReportResponse) => {\n            if (response.success) {\n                resolve(response.report!);\n            } else {\n                reject(response.error);\n            }\n        });\n    });\n}\n\nexport type TogglReportItem = {\n    project?: TogglProject;\n    color: string;\n    seconds: number;\n    description: string;\n    mapping?: TogglProjectMapping;\n}\n\n/**\n * Fetch report implementation (called from background script)\n */\nexport async function togglFetchReportImpl(date: string): Promise<TogglReportItem[]> {\n    const apiToken = await togglGetApiToken();\n    const workspaceId = await togglGetWorkspaceId();\n    console.log(`Fetching report for date=${date} in workspace=${workspaceId}`);\n    return fetch(`https://api.track.toggl.com/reports/api/v3/workspace/${workspaceId}/summary/time_entries`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Basic ${btoa(apiToken + ':api_token')}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            'start_date': date,\n            'end_date': date,\n            'grouping': 'projects',\n            'sub_grouping': 'time_entries'\n        })\n    })\n        .then((resp) => resp.json())\n        .then((json) => togglConvertReport(json))\n        .catch(err => {\n            console.warn('Failed to fetch summary/time_entries', err);\n            throw err;\n        });\n}\n\n/**\n * Convert report from Toggl API format to our format\n */\nasync function togglConvertReport(json: any): Promise<TogglReportItem[]> {\n    const projectsMap = await togglGetProjectsMap();\n    const projectMappings = await togglGetProjectMappings();\n    const items: TogglReportItem[] = [];\n    json?.groups?.forEach((group: any) => {\n        const projectId = group.id;\n        const descriptionLines: string[] = [];\n        let seconds = 0;\n        let color = '#000';\n        group?.sub_groups?.forEach((subGroup: any) => {\n            descriptionLines.push(subGroup.title);\n            seconds += subGroup.seconds;\n            color = subGroup.project_hex_color;\n        });\n        if (seconds > 0) {\n            items.push({\n                project: projectsMap.get(projectId),\n                color: color,\n                seconds: togglRoundSeconds(seconds),\n                description: descriptionLines.join('\\n'),\n                mapping: projectMappings[projectId]\n            });\n        }\n    });\n    return items;\n}\n\n/**\n * Round seconds to 15-minute intervals\n */\nfunction togglRoundSeconds(seconds: number): number {\n    const fifteenMinutes = 15 * 60;\n    const quarters = Math.ceil(seconds / fifteenMinutes);\n    return quarters * fifteenMinutes;\n}\n"],"names":["_a"],"mappings":"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"}